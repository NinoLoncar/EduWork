@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Common.DTOs

@inject IAccessTokenProvider TokenProvider
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject HttpClient Http

<div id="div">

	@if (isLoading == true)
	{
		<div class="loader"></div>
	}
	else
	{
		<table class="table">
			<thead class="thead-light">
				<tr>
					<th>
						@currentDate
					</th>
					<th>
						@timeSum.ToString(@"hh\:mm\:ss")
					</th>
				</tr>
			</thead>
			<tbody>
				@if (workTimes != null)
				{
					foreach (var workTime in workTimes)
					{
						<tr>
							<td>
								@workTime.StartTime.ToString(@"HH\:mm") &nbsp;&nbsp;&nbsp; => &nbsp;&nbsp;&nbsp; @workTime.EndTime.ToString(@"HH\:mm")
							</td>
							<td>
								@((workTime.EndTime - workTime.StartTime).ToString(@"hh\:mm\:ss"))
							</td>
						</tr>
					}
				}
			</tbody>
		</table>
	}

</div>

@code {
	private WorkTimeDTO[]? workTimes;
	private DateOnly currentDate = DateOnly.FromDateTime(DateTime.Now);
	private TimeSpan timeSum = new TimeSpan(0,0,0);
	private bool isLoading = false;

	protected override async Task OnInitializedAsync()
	{
		await ShowTableData();
	}

	public async Task ShowTableData()
	{
		isLoading = true;
		await GetWorkTimes();
		CalculateTimeSum();
		isLoading = false;
		StateHasChanged();
	}

	private async Task GetWorkTimes()
	{
		var tokenResult = await TokenProvider.RequestAccessToken();
		var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();

		if (tokenResult.TryGetToken(out var token))
		{
			Http.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token.Value);
			string url = $"api/WorkTimes?date={currentDate:yyyy-MM-dd}";
			workTimes = await Http.GetFromJsonAsync<WorkTimeDTO[]>(url);
		}
	}
	private void CalculateTimeSum()
	{
		timeSum = new TimeSpan(0, 0, 0);

		if (workTimes != null)
		{
			foreach (var workTime in workTimes)
			{
				TimeSpan duration = workTime.EndTime - workTime.StartTime;
				timeSum += duration;
			}
		}
	}
}
