@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Common.DTOs

@inject IAccessTokenProvider TokenProvider
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject HttpClient Http

<div id="div">


<table class="table">
	<thead class="thead-light">
		<tr>
			<th>
				@currentDate
			</th>
			<th>
					@timeSum.ToString(@"hh\:mm\:ss")
			</th>
		</tr>
	</thead>
	<tbody>
		@if (workTimes != null)
		{
			foreach (var workTime in workTimes)
			{
				<tr>
					<td>
							@workTime.StartTime.ToString(@"HH\:mm") &nbsp;&nbsp;&nbsp; => &nbsp;&nbsp;&nbsp; @workTime.EndTime.ToString(@"HH\:mm")
					</td>
					<td>
							@((workTime.EndTime - workTime.StartTime).ToString(@"hh\:mm\:ss"))
					</td>
				</tr>
			}
		}
	</tbody>
</table>
</div>

@code {
	private WorkTimeDTO[]? workTimes;
	private DateOnly currentDate = DateOnly.FromDateTime(DateTime.Now);
	private TimeSpan timeSum = new TimeSpan(0,0,0);
	protected override async Task OnInitializedAsync()
	{
		await GetWorkTimes();
		CalculateTimeSum();
	}

	public async Task GetWorkTimes()
	{
		var tokenResult = await TokenProvider.RequestAccessToken();
		var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();

		if (tokenResult.TryGetToken(out var token))
		{

			Http.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token.Value);
			workTimes = await Http.GetFromJsonAsync<WorkTimeDTO[]>("api/WorkTimes");
		}
	}
	private void CalculateTimeSum()
	{
		timeSum = new TimeSpan(0, 0, 0);

		if (workTimes != null)
		{
			foreach (var workTime in workTimes)
			{
				TimeSpan duration = workTime.EndTime - workTime.StartTime;
				timeSum += duration;
			}
		}
	}
}
